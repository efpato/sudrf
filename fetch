#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging
import os
import signal
import sys

from page_object import PageObject, PageElement
from page_object.ui import Button, Link, Textbox
from selenium import webdriver
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support.wait import WebDriverWait

import xlrd
import xlsxwriter


logging.basicConfig(format=("%(asctime)s  %(levelname)-8s "
                            "%(module)-15s %(message)s"),
                    level=logging.DEBUG)
logging.getLogger(
    "selenium.webdriver.remote.remote_connection").setLevel(logging.WARNING)

stopped = False


class JQuerySelect(PageElement):
    def __set__(self, instance, value):
        if value is None:
            return

        value = str(value).strip()
        if not value:
            return

        self.__get__(instance, instance.__class__)
        instance.webdriver.execute_script(
            """jQuery("%s").val("%s").change();""" %
            (self._locator[1], value))


class SearchPage(PageObject):
    search_tb = Textbox(id="portalSearchInput")
    search_mode = Button(id="searchModeSelectorBtn")
    search_btn = Button(id="textSearchButton")
    request_type = JQuerySelect(css="select#simpleRequestTypeSelector")
    result_list = PageElement(id="resultsList")
    table_view = Link(css="a[value='tableView']")
    in_results = Button(css="span#nestedQueryCheckboxOuter > span")
    type_of_proceedings = Link(link_text="Вид судопроизводства")
    criminal_case = Link(partial_link_text="Уголовное дело")
    show = Link(link_text="Показать")

    def wait_for_preloader(self, timeout=30):
        WebDriverWait(self.webdriver, timeout=timeout).until(
            lambda d: d.find_element_by_id("container").is_displayed())

    def wait_for_results(self, timeout=30):
        return WebDriverWait(self.webdriver, timeout=timeout).until(
            lambda d: d.find_element_by_id("resultContainer").is_displayed())

    @property
    def pages(self):
        return self.webdriver.find_elements_by_css_selector(
            "table#topPager td.pageNumTD")

    @property
    def results(self):
        def get():
            ret = []
            trs = self.result_list.find_elements_by_xpath(".//table/tbody/tr")
            for tr in trs:
                ret.append([td.text.strip()
                            for td in tr.find_elements_by_tag_name("td")])
            return ret

        res = get()
        for page in self.pages[1:]:
            page.click()
            self.wait_for_results()
            res.extend(get())

        return res


def load(filename):
    logging.debug('Loading data from "%s"', filename)

    workbook = xlrd.open_workbook(filename)
    sheet = workbook.sheet_by_index(0)

    data = []
    for row in range(sheet.nrows):
        data.append(sheet.cell_value(row, 0))

    logging.debug('Data has been loaded (%d rows)', len(data))

    return data


def fetch(name, insurance=True):
    if stopped:
        return []

    logging.debug('Fetching for "%s" insurance=%s', name, insurance)

    driver = None

    try:
        driver = webdriver.Firefox()
        driver.maximize_window()
        driver.get("https://bsr.sudrf.ru/bigs/portal.html")

        page = SearchPage(driver)
        page.wait_for_preloader()
        page.search_tb = name
        page.search_mode.click()
        page.request_type = "EXACT"
        page.search_btn.click()

        page.wait_for_results()
        if "Ничего не найдено" in page.result_list.text:
            return []

        page.table_view.click()

        if insurance:
            page.in_results.click()
            page.search_tb = "страховой"
            page.search_btn.click()
        else:
            try:
                page.type_of_proceedings.click()
                page.criminal_case.click()
                page.show.click()
            except TimeoutException as e:
                logging.warning(e)
                return []

        page.wait_for_results()
        if "Ничего не найдено" in page.result_list.text:
            return []

        return page.results
    except KeyboardInterrupt:
        pass
    except Exception as e:
        logging.exception(e)
    finally:
        if driver is not None:
            driver.quit()

    return []


def report(filename, results):
    logging.debug('Creating report ...')
    out = "%s.out.xlsx" % os.path.basename(filename).split('.')[0]

    workbook = xlsxwriter.Workbook(out)
    sheet0 = workbook.add_worksheet("Страховой")
    sheet1 = workbook.add_worksheet("Уголовный")

    sheet0.write(0, 0, "ФИО")
    sheet0.write(0, 1, "№")
    sheet0.write(0, 2, "Тип документа")
    sheet0.write(0, 3, "Дата поступления")
    sheet0.write(0, 4, "Дата решения")
    sheet0.write(0, 5, "Субъект РФ")
    sheet0.write(0, 6, "Наименование суда")
    sheet0.write(0, 7, "Статья или категория")
    sheet0.write(0, 8, "Результат")
    sheet0.write(0, 9, "Дата поступления")

    sheet1.write(0, 0, "ФИО")
    sheet1.write(0, 1, "№")
    sheet1.write(0, 2, "Тип документа")
    sheet1.write(0, 3, "Дата поступления")
    sheet1.write(0, 4, "Дата решения")
    sheet1.write(0, 5, "Субъект РФ")
    sheet1.write(0, 6, "Наименование суда")
    sheet1.write(0, 7, "Статья или категория")
    sheet1.write(0, 8, "Результат")
    sheet1.write(0, 9, "Дата поступления")

    row0 = 1
    row1 = 1
    while results:
        name, insurance, criminal = results.pop()

        for data in insurance:
            sheet0.write(row0, 0, name)
            for col, value in enumerate(data, 1):
                sheet0.write(row0, col, value)
            row0 += 1

        for data in criminal:
            sheet1.write(row1, 0, name)
            for col, value in enumerate(data, 1):
                sheet1.write(row1, col, value)
            row1 += 1

    workbook.close()
    logging.debug('Report has been created: "%s"', out)


def usage():
    print('Usage: %s input-file' %
          os.path.basename(__file__), file=sys.stderr)
    sys.exit(1)


def main():
    def sigint_handler(signum, frame):
        global stopped
        stopped = True

    signal.signal(signal.SIGINT, sigint_handler)

    if len(sys.argv) < 2:
        usage()

    filename = sys.argv[1]

    results = []
    for name in load(filename):
        if stopped:
            break
        results.append((name, fetch(name), fetch(name, False)))

    report(filename, results)


if __name__ == '__main__':
    main()
